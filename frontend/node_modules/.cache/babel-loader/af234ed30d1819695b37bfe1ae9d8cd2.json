{"ast":null,"code":"import PostACommentOnAComment from \"@/components/PostACommentOnAComment.vue\";\nimport dayjs from 'dayjs';\n\nrequire('dayjs/locale/fr');\n\ndayjs.locale('fr');\nexport default {\n  name: 'ShareAlone',\n  components: {\n    PostACommentOnAComment\n  },\n\n  data() {\n    return {\n      loggedUserId: \"\",\n      apiCommentsResponse: Array,\n      apiLength: Number,\n      CommentId: \"\",\n      CommentText: \"\",\n      CommentcreatedAt: \"\",\n      CommentupdatedAt: \"\",\n      CommentuserUserId: \"\",\n      modifyCommentBox: {\n        type: Boolean,\n        default: true\n      },\n      isAdmin: {\n        type: Boolean,\n        default: false\n      }\n    };\n  },\n\n  methods: {\n    formatDate(dateString) {\n      const date = dayjs(dateString); // Then specify how you want your dates to be formatted\n\n      return date.format('dddd D MMMM YYYY , HH:mm');\n    },\n\n    modifyComment() {\n      this.modifyCommentBox = false;\n    },\n\n    doNotModify() {\n      this.modifyCommentBox = true;\n    },\n\n    correctComment() {\n      const ShareToBeCorrected = document.getElementById(\"ShareToBeCorrected\");\n      const ShareId = new URL(window.location.href).hash.split(\"=\")[1];\n      const Token = JSON.parse(sessionStorage.getItem(\"Token\"));\n      const Modify = new FormData(ShareToBeCorrected);\n      Modify.append('ShareId', ShareId); //--- TEST ---- ///\n      // for(var pair of Modify.entries()) {\n      //   console.log(pair[0]+ ', '+ pair[1]);\n      // }\n\n      fetch(`http://localhost:3000/api/shares/${ShareId}`, {\n        method: 'PUT',\n        headers: {\n          \"Accept\": \"*/*\",\n          // \"Content-Type\": \"multipart/form-data\", \n          \"Authorization\": \"Bearer \" + Token\n        },\n        body: Modify,\n        mode: \"cors\"\n      }).then(response => {\n        if (response.status == 201) {\n          this.success = true;\n          this.message = \"Mise à jour effectuée.\";\n          this.modifyForm = true;\n          this.$router.push({\n            name: 'wall'\n          });\n          this.$router.go(0); // history.go(0);\n        } else {\n          response.json().then(json => {\n            this.success = false;\n            console.log(json);\n            this.message = json.error || json.message;\n            return this.message;\n          });\n        }\n      }).catch(() => {\n        this.success = false;\n        this.message = `Le serveur ne répond pas ! Veuillez réessayer ultérieurement`;\n      });\n    },\n\n    deleteComment() {\n      const Token = JSON.parse(sessionStorage.getItem(\"Token\")); // const loggedUserId=JSON.parse(sessionStorage.getItem(\"UserId\"))\n\n      const ShareId = new URL(window.location.href).hash.split(\"=\")[1];\n      const Share = {\n        \"ShareId\": ShareId\n      };\n      const deleteShare = confirm(\"Le commentaire et tous les commentaires associés vont être effacés\");\n\n      if (deleteShare) {\n        fetch(`http://localhost:3000/api/comments/${ShareId}`, {\n          method: 'DELETE',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + Token\n          },\n          body: JSON.stringify(Share),\n          mode: \"cors\"\n        }).then(() => {\n          alert(\"Share effacé !\");\n          setTimeout(this.$router.push({\n            name: 'wall'\n          }), 3000);\n          this.$router.go(0);\n        }).catch(error => {\n          alert(error);\n        });\n      } else {\n        this.$router.push({\n          name: 'wall'\n        });\n        this.$router.go(0);\n      }\n    }\n\n  },\n\n  beforeMount() {\n    const Token = JSON.parse(sessionStorage.getItem(\"Token\"));\n    const loggedUserId = JSON.parse(sessionStorage.getItem(\"UserId\"));\n    const ShareId = new URL(window.location.href).hash.split(\"=\")[1];\n    this.isAdmin = sessionStorage.getItem(\"isAdmin\"); // LES COMMENTAIRES    \n\n    fetch(`http://localhost:3000/api/comments/${ShareId}`, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + Token\n      },\n      mode: \"cors\"\n    }).then(res => {\n      return res.json();\n    }).then(res => {\n      this.loggedUserId = loggedUserId;\n      this.apiCommentsResponse = res;\n      this.apiLength = res.length;\n    }).catch(error => {\n      alert(error);\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["PostACommentOnAComment","dayjs","require","locale","name","components","data","loggedUserId","apiCommentsResponse","Array","apiLength","Number","CommentId","CommentText","CommentcreatedAt","CommentupdatedAt","CommentuserUserId","modifyCommentBox","type","Boolean","default","isAdmin","methods","formatDate","dateString","date","format","modifyComment","doNotModify","correctComment","ShareToBeCorrected","document","getElementById","ShareId","URL","window","location","href","hash","split","Token","JSON","parse","sessionStorage","getItem","Modify","FormData","append","fetch","method","headers","body","mode","then","response","status","success","message","modifyForm","$router","push","go","json","console","log","error","catch","deleteComment","Share","deleteShare","confirm","stringify","alert","setTimeout","beforeMount","res","length"],"sourceRoot":"","sources":["/Users/stefan/Library/Mobile Documents/com~apple~CloudDocs/08 WEB ET SITES/P7/frontend/src/components/ShareAloneComments.vue"],"sourcesContent":["<template>\n\n                    <section class=\"mainshares shares\">\n\n                          <div class=\"card\" id=\"shareAloneComments\" >\n                              <div  id=\"commentDiv\" \n                                v-for=\"item in apiCommentsResponse\"\n                                :key=\"item.shareShareId\"\n                                class=\"card card__info card__info--2\">\n                                      <div v-if=\"item.CommentId\" >\n                                        //--- le c\n                                        <div v-if=\"modifyCommentBox\">\n                                          <p class=\"card__info--text card__info--sharetext\">{{ item.CommentText }}</p>\n                                        </div>\n\n                                        <div class = \"formSection\" id=\"ShareForm\" >\n                                            <div class = \"formDiv\">\n                                                      <form     \n                                                                type=\"multipart/form-data\"\n                                                                method=\"POST\" \n                                                                name=\"form\" \n                                                                id=\"CommentToBePosted\"\n                                                                class=\"formulaire\">\n                                                                \n                                                                <!--Le Comment-->\n                                                                <div class=\"formLine\">\n                                                                          <label    \n                                                                                    for=\"CommentText\" \n                                                                                    class=\"label\">Votre commentaire</label>\n                                                                          <textarea class=\"bigtextarea textarea input\"\n                                                                                    form=\"CommentToBePosted\" \n                                                                                    type=\"textarea\"\n                                                                                    @input=\"checkForm\"\n                                                                                  \n                                                                                    placeholder= \"...\"\n                                                                                    autofocus\n                                                                                    id=\"CommentText\"\n                                                                                    name=\"CommentText\"></textarea>\n                                                                </div>\n                                                                \n                                                                <div class=\"btn-div\">\n                                                                          <button type=\"button\" class=\"btn\" @click=\"displayGoTo()\" id=\"CancelBtn\">Annuler</button>\n                                                                          <button type=\"button\" class=\"btn\" @click=\"Comment()\" id=\"CommentBtn\" disabled>Commenter</button>\n                                                                </div>\n                                                      </form>\n                                            </div>\n                                        </div>\n                                        <div class=\"separator\"></div>\n                                        <div class=\"card__info--complement\">\n                                          <div>\n                                            <p> {{ item.user.UserFirstname }} {{ item.user.UserName }} / {{ item.user.UserDepartement }} / {{ item.user.UserRole }}</p>\n                                            <p>{{ formatDate(item.updatedAt) }}</p> <!-- le commentateur du Share -->\n                                            <p hidden>{{ item.commentCommentId }} </p>\n                                            <p hidden id=\"CommentOnACommentId\">{{ item.CommentId }}</p>\n                                          </div>\n                                        \n                                        </div>\n      \n                                      </div>\n\n                                      <div class=\"btn-div\">\n                                              <button v-show=\"item.userUserId==loggedUserId  || isAdmin\" type=\"button\" class=\"btn\" @click=\"modifyComment()\" id=\"modifyCommentBtn\">Corriger</button>\n                                              <button v-show=\"item.userUserId==loggedUserId  || isAdmin\" type=\"button\" class=\"btn\" @click=\"deleteComment()\" id=\"deleteCommentBtn\">Effacer</button>\n                                      </div>\n\n                                      <PostACommentOnAComment v-if=\"item.userUserId!=loggedUserId || isAdmin == 1\"/>\n                            </div>\n                        </div>\n\n                      \n                        \n    \n                    </section>\n\n                    \n                    \n\n          \n</template>\n\n<script>\nimport PostACommentOnAComment from \"@/components/PostACommentOnAComment.vue\"\nimport dayjs from 'dayjs'\nrequire('dayjs/locale/fr')\ndayjs.locale('fr')\n\nexport default {\n          name : 'ShareAlone',\n          components: {\n                              PostACommentOnAComment\n          },\n\n          \n\n          data(){\n                    return{\n\n                            loggedUserId: \"\",\n                            apiCommentsResponse : Array,\n                            apiLength : Number,\n\n                            CommentId : \"\",\n                            CommentText : \"\",\n                            CommentcreatedAt : \"\",\n                            CommentupdatedAt : \"\",\n                            CommentuserUserId : \"\", \n\n                            modifyCommentBox :{\n                              type: Boolean,\n                              default: true },\n\n                            isAdmin :{\n                              type: Boolean,\n                              default: false },\n\n                    }\n          },\n\n          methods : {\n\n            formatDate(dateString) {\n                            const date = dayjs(dateString);\n                                // Then specify how you want your dates to be formatted\n                            return date.format('dddd D MMMM YYYY , HH:mm');\n                      },\n\n            modifyComment() {\n                  this.modifyCommentBox = false;\n            },\n            doNotModify(){\n                  this.modifyCommentBox = true;\n            },\n\n            correctComment(){\n                    const ShareToBeCorrected = document.getElementById(\"ShareToBeCorrected\");\n                    const ShareId = new URL(window.location.href).hash.split(\"=\")[1];\n                    const Token = JSON.parse(sessionStorage.getItem(\"Token\"));\n                    const Modify = new FormData(ShareToBeCorrected);\n\n                    Modify.append('ShareId',ShareId)\n\n\n                    //--- TEST ---- ///\n                    // for(var pair of Modify.entries()) {\n                    //   console.log(pair[0]+ ', '+ pair[1]);\n                    // }\n\n                    fetch(`http://localhost:3000/api/shares/${ShareId}`, {\n                              method: 'PUT',\n                              headers: {\n                                  \"Accept\":\"*/*\",\n                                  // \"Content-Type\": \"multipart/form-data\", \n                                  \"Authorization\": \"Bearer \" + Token\n                              },\n                              body: Modify,\n                              mode : \"cors\"})\n\n                    .then((response) => {\n\n                              if (response.status == 201) { \n                                        this.success= true;\n                                        this.message = \"Mise à jour effectuée.\";\n                                        this.modifyForm = true;\n                                        this.$router.push({ name: 'wall' });\n                                        this.$router.go(0);\n                                        // history.go(0);\n                              } else {\n                                        response.json ()\n                                        .then ((json) => {\n                                        this.success= false;\n                                        console.log(json);\n                                        this.message = json.error ||  json.message ;\n                                        return this.message\n                                        })\n                              }\n                    })\n                    .catch (() => {\n                              this.success= false;\n                              this.message = `Le serveur ne répond pas ! Veuillez réessayer ultérieurement`;\n                    })         \n\n            },\n            deleteComment() {\n\n                          const  Token = JSON.parse(sessionStorage.getItem(\"Token\"));\n                          // const loggedUserId=JSON.parse(sessionStorage.getItem(\"UserId\"))\n                          const ShareId = new URL(window.location.href).hash.split(\"=\")[1];\n                          const Share = {\n                            \"ShareId\" : ShareId\n                          }\n\n                          const deleteShare = confirm(\"Le commentaire et tous les commentaires associés vont être effacés\")\n\n                          if (deleteShare){\n                            fetch(`http://localhost:3000/api/comments/${ShareId}`, {\n                              method: 'DELETE',\n                              headers: {\"Content-Type\": \"application/json\", \n                                        \"Authorization\": \"Bearer \" + Token\n                              },\n                              body: JSON.stringify(Share),\n                              mode : \"cors\"\n                            })\n                            .then(() => {\n                              alert(\"Share effacé !\");\n                              setTimeout(this.$router.push({ name: 'wall' }), 3000);\n                              this.$router.go(0);\n                            })\n                            .catch( (error) => { alert(error);\n                            })\n                          }else{\n                             this.$router.push({ name: 'wall' });\n                             this.$router.go(0);\n                          }\n            },\n          },\n\n          beforeMount () {\n                            const  Token = JSON.parse(sessionStorage.getItem(\"Token\"));\n                            const loggedUserId=JSON.parse(sessionStorage.getItem(\"UserId\"))\n                            const ShareId = new URL(window.location.href).hash.split(\"=\")[1];\n\n                            this.isAdmin = sessionStorage.getItem(\"isAdmin\");\n                           \n                           // LES COMMENTAIRES    \n\n                            fetch(`http://localhost:3000/api/comments/${ShareId}`, {\n                            method: 'GET',\n                            headers: {\"Content-Type\": \"application/json\", \n                                      \"Authorization\": \"Bearer \" + Token\n                            },\n                            mode : \"cors\"\n                            })\n                            .then((res) => {\n                              return res.json();\n                            })\n                            .then((res) =>{\n                              this.loggedUserId = loggedUserId;\n                              this.apiCommentsResponse=res\n                              this.apiLength = res.length\n                            })\n                            .catch( (error) => { alert(error);\n                            });\n          },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n\n\n</style>"]},"metadata":{},"sourceType":"module"}