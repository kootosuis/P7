{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vShow as _vShow, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"mainshares shares\"\n};\nconst _hoisted_2 = {\n  class: \"card\",\n  id: \"shareAloneComments\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"card__info--text card__info--sharetext\"\n};\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"separator\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = {\n  class: \"card__info--complement\"\n};\nconst _hoisted_7 = {\n  hidden: \"\"\n};\nconst _hoisted_8 = {\n  hidden: \"\",\n  id: \"CommentOnACommentId\"\n};\nconst _hoisted_9 = {\n  class: \"btn-div\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PostACommentOnAComment = _resolveComponent(\"PostACommentOnAComment\");\n\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.apiCommentsResponse, item => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      id: \"commentDiv\",\n      key: item.shareShareId,\n      class: \"card card__info card__info--2\"\n    }, [item.CommentId ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", null, [_createElementVNode(\"p\", _hoisted_4, _toDisplayString(item.CommentText), 1\n    /* TEXT */\n    )]), _hoisted_5, _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, _toDisplayString(item.user.UserFirstname) + \" \" + _toDisplayString(item.user.UserName) + \" / \" + _toDisplayString(item.user.UserDepartement) + \" / \" + _toDisplayString(item.user.UserRole), 1\n    /* TEXT */\n    ), _createElementVNode(\"p\", null, _toDisplayString($options.formatDate(item.updatedAt)), 1\n    /* TEXT */\n    ), _createCommentVNode(\" le commentateur du Share \"), _createElementVNode(\"p\", _hoisted_7, _toDisplayString(item.commentCommentId), 1\n    /* TEXT */\n    ), _createElementVNode(\"p\", _hoisted_8, _toDisplayString(item.CommentId), 1\n    /* TEXT */\n    )])])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"button\", {\n      type: \"button\",\n      class: \"btn\",\n      onClick: _cache[0] || (_cache[0] = $event => _ctx.modifyComment()),\n      id: \"modifyCommentBtn\"\n    }, \"Corriger\", 512\n    /* NEED_PATCH */\n    ), [[_vShow, item.userUserId == $data.loggedUserId || _ctx.isAdmin]]), _withDirectives(_createElementVNode(\"button\", {\n      type: \"button\",\n      class: \"btn\",\n      onClick: _cache[1] || (_cache[1] = $event => $options.deleteComment()),\n      id: \"deleteCommentBtn\"\n    }, \"Effacer\", 512\n    /* NEED_PATCH */\n    ), [[_vShow, item.userUserId == $data.loggedUserId || _ctx.isAdmin]])]), _withDirectives(_createVNode(_component_PostACommentOnAComment, null, null, 512\n    /* NEED_PATCH */\n    ), [[_vShow, item.userUserId != $data.loggedUserId]])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])]);\n}","map":{"version":3,"mappings":";;AAE6BA,OAAK,EAAC;;;AAEPA,OAAK,EAAC;AAAOC,IAAE,EAAC;;;;;;AAOLD,OAAK,EAAC;;;gCAEXE,oBAA6B,KAA7B,EAA6B;AAAxBF,OAAK,EAAC;AAAkB,CAA7B,EAAsB,IAAtB,EAAsB;AAAA;AAAtB;;;AACKA,OAAK,EAAC;;;AAIHG,QAAM,EAAN;;;AACAA,QAAM,EAAN;AAAOF,IAAE,EAAC;;;AAOfD,OAAK,EAAC;;;;;uBAxBvBI,oBAsCU,SAtCV,cAsCU,CApCPF,oBAgCM,KAhCN,cAgCM,oBA/BJE,oBA6BIC,SA7BJ,EA6BI,IA7BJ,EA6BIC,YA5BYC,yBA4BZ,EA5BIC,IAA2B,IAAvB;yBADZJ,oBA6BI,KA7BJ,EA6BI;AA7BEH,QAAE,EAAC,YA6BL;AA3BFQ,SAAG,EAAED,IAAI,CAACE,YA2BR;AA1BHV,WAAK,EAAC;AA0BH,KA7BJ,GAIkBQ,IAAI,CAACG,2BAAhBP,oBAeM,KAfN,EAeMQ,UAfN,EAeM,CAdJV,oBAEM,KAFN,EAEM,IAFN,EAEM,CADJA,oBAA4E,GAA5E,cAA4EW,iBAAvBL,IAAI,CAACM,WAAkB,CAA5E,EAAqE;AAAA;AAArE,KACI,CAFN,CAcI,EAXJC,UAWI,EAVJb,oBAQM,KARN,cAQM,CAPJA,oBAKM,KALN,EAKM,IALN,EAKM,CAJHA,oBAA2H,GAA3H,EAA2H,IAA3H,EAA2HW,iBAApHL,IAAI,CAACQ,IAAL,CAAUC,aAA0G,IAA1F,GAA0F,GAAzFJ,iBAAGL,IAAI,CAACQ,IAAL,CAAUE,QAAb,CAAyF,GAAjE,KAAiE,GAA9DL,iBAAGL,IAAI,CAACQ,IAAL,CAAUG,eAAb,CAA8D,GAA/B,KAA+B,GAA5BN,iBAAGL,IAAI,CAACQ,IAAL,CAAUI,QAAb,CAA/F,EAAoH;AAAA;AAApH,KAIG,EAHHlB,oBAAuC,GAAvC,EAAuC,IAAvC,EAAuCW,iBAAjCQ,oBAAWb,IAAI,CAACc,SAAhB,CAAiC,CAAvC,EAA+B;AAAA;AAA/B,KAGG,EAHqCC,iDAGrC,EAFHrB,oBAA0C,GAA1C,cAA0CW,iBAA7BL,IAAI,CAACgB,gBAAwB,CAA1C,EAAkC;AAAA;AAAlC,KAEG,EADHtB,oBAA2D,GAA3D,cAA2DW,iBAArBL,IAAI,CAACG,SAAgB,CAA3D,EAAoD;AAAA;AAApD,KACG,CALN,CAOI,CARN,CAUI,CAfN,wCAiBAT,oBAGM,KAHN,cAGM,iBAFEA,oBAAqJ,QAArJ,EAAqJ;AAA1FuB,UAAI,EAAC,QAAqF;AAA5EzB,WAAK,EAAC,KAAsE;AAA/D0B,aAAK,sCAAEC,oBAAF,CAA0D;AAAvC1B,QAAE,EAAC;AAAoC,KAArJ,EAAoI,UAApI,EAA4I;AAAA;AAA5I,OAA4I,UAA5HO,IAAI,CAACoB,UAAL,IAAiBrB,kBAAjB,IAAkCoB,aAA0F,EAE9I,kBADEzB,oBAAoJ,QAApJ,EAAoJ;AAAzFuB,UAAI,EAAC,QAAoF;AAA3EzB,WAAK,EAAC,KAAqE;AAA9D0B,aAAK,sCAAEL,wBAAF,CAAyD;AAAtCpB,QAAE,EAAC;AAAmC,KAApJ,EAAoI,SAApI,EAA2I;AAAA;AAA3I,OAA2I,UAA3HO,IAAI,CAACoB,UAAL,IAAiBrB,kBAAjB,IAAkCoB,aAAyF,EAC7I,CAHN,mBAKAE,aAAgEC,iCAAhE,EAAgE,IAAhE,EAAgE,IAAhE,EAAgE;AAAA;AAAhE,OAAgE,UAAhCtB,IAAI,CAACoB,UAAL,IAAiBrB,mBAAe,GA1BvE;GA6BI,CA7BJ;;AAAA,GA+BI,EAhCN,CAoCO,CAtCV","names":["class","id","_createElementVNode","hidden","_createElementBlock","_Fragment","_renderList","$data","item","key","shareShareId","CommentId","_hoisted_3","_toDisplayString","CommentText","_hoisted_5","user","UserFirstname","UserName","UserDepartement","UserRole","$options","updatedAt","_createCommentVNode","commentCommentId","type","onClick","_ctx","userUserId","_createVNode","_component_PostACommentOnAComment"],"sourceRoot":"","sources":["/Users/stefan/Library/Mobile Documents/com~apple~CloudDocs/08 WEB ET SITES/P7/frontend/src/components/ShareAloneComments.vue"],"sourcesContent":["<template>\n\n                    <section class=\"mainshares shares\">\n\n                       <div class=\"card\" id=\"shareAloneComments\" >\n                         <div  id=\"commentDiv\" \n                          v-for=\"item in apiCommentsResponse\"\n                          :key=\"item.shareShareId\"\n                          class=\"card card__info card__info--2\">\n                                <div v-if=\"item.CommentId\" >\n                                  <div>\n                                    <p class=\"card__info--text card__info--sharetext\">{{ item.CommentText }}</p>\n                                  </div>\n                                  <div class=\"separator\"></div>\n                                  <div class=\"card__info--complement\">\n                                    <div>\n                                       <p> {{ item.user.UserFirstname }} {{ item.user.UserName }} / {{ item.user.UserDepartement }} / {{ item.user.UserRole }}</p>\n                                       <p>{{ formatDate(item.updatedAt) }}</p> <!-- le commentateur du Share -->\n                                       <p hidden>{{ item.commentCommentId }} </p>\n                                       <p hidden id=\"CommentOnACommentId\">{{ item.CommentId }}</p>\n                                    </div>\n                                   \n                                  </div>\n \n                                </div>\n\n                                <div class=\"btn-div\">\n                                        <button v-show=\"item.userUserId==loggedUserId  || isAdmin\" type=\"button\" class=\"btn\" @click=\"modifyComment()\" id=\"modifyCommentBtn\">Corriger</button>\n                                        <button v-show=\"item.userUserId==loggedUserId  || isAdmin\" type=\"button\" class=\"btn\" @click=\"deleteComment()\" id=\"deleteCommentBtn\">Effacer</button>\n                                </div>\n\n                                <PostACommentOnAComment v-show=\"item.userUserId!=loggedUserId\"/>\n                                          \n\n                       </div>\n                       \n                       </div>\n\n                     \n                      \n                    </section>\n                    \n\n          \n</template>\n\n<script>\nimport PostACommentOnAComment from \"@/components/PostACommentOnAComment.vue\"\nimport dayjs from 'dayjs'\nrequire('dayjs/locale/fr')\ndayjs.locale('fr')\n\nexport default {\n          name : 'ShareAlone',\n          components: {\n                              PostACommentOnAComment\n          },\n\n          \n\n          data(){\n                    return{\n\n                            loggedUserId: \"\",\n                            apiCommentsResponse : Array,\n                            apiLength : Number,\n\n                            CommentId : \"\",\n                            CommentText : \"\",\n                            CommentcreatedAt : \"\",\n                            CommentupdatedAt : \"\",\n                            CommentuserUserId : \"\", \n\n                            modifyForm :{\n                              type: Boolean,\n                              default: true },\n\n                    }\n          },\n\n          methods : {\n\n            formatDate(dateString) {\n                            const date = dayjs(dateString);\n                                // Then specify how you want your dates to be formatted\n                            return date.format('dddd D MMMM YYYY , HH:mm');\n                      },\n\n            modifyShare() {\n                  this.modifyForm = false;\n            },\n            doNotModify(){\n                  this.modifyForm = true;\n            },\n\n            correctComment(){\n                    const ShareToBeCorrected = document.getElementById(\"ShareToBeCorrected\");\n                    const ShareId = new URL(window.location.href).hash.split(\"=\")[1];\n                    const Token = JSON.parse(sessionStorage.getItem(\"Token\"));\n                    const Modify = new FormData(ShareToBeCorrected);\n\n                    Modify.append('ShareId',ShareId)\n\n\n                    //--- TEST ---- ///\n                    // for(var pair of Modify.entries()) {\n                    //   console.log(pair[0]+ ', '+ pair[1]);\n                    // }\n\n                    fetch(`http://localhost:3000/api/shares/${ShareId}`, {\n                              method: 'PUT',\n                              headers: {\n                                  \"Accept\":\"*/*\",\n                                  // \"Content-Type\": \"multipart/form-data\", \n                                  \"Authorization\": \"Bearer \" + Token\n                              },\n                              body: Modify,\n                              mode : \"cors\"})\n\n                    .then((response) => {\n\n                              if (response.status == 201) { \n                                        this.success= true;\n                                        this.message = \"Mise à jour effectuée.\";\n                                        this.modifyForm = true;\n                                        this.$router.push({ name: 'wall' });\n                                        this.$router.go(0);\n                                        // history.go(0);\n                              } else {\n                                        response.json ()\n                                        .then ((json) => {\n                                        this.success= false;\n                                        console.log(json);\n                                        this.message = json.error ||  json.message ;\n                                        return this.message\n                                        })\n                              }\n                    })\n                    .catch (() => {\n                              this.success= false;\n                              this.message = `Le serveur ne répond pas ! Veuillez réessayer ultérieurement`;\n                    })         \n\n            },\n            deleteComment() {\n\n                          const  Token = JSON.parse(sessionStorage.getItem(\"Token\"));\n                          // const loggedUserId=JSON.parse(sessionStorage.getItem(\"UserId\"))\n                          const ShareId = new URL(window.location.href).hash.split(\"=\")[1];\n                          const Share = {\n                            \"ShareId\" : ShareId\n                          }\n\n                          const deleteShare = confirm(\"Le commentaire et tous les commentaires associés vont être effacés\")\n\n                          if (deleteShare){\n                            fetch(`http://localhost:3000/api/comments/${ShareId}`, {\n                              method: 'DELETE',\n                              headers: {\"Content-Type\": \"application/json\", \n                                        \"Authorization\": \"Bearer \" + Token\n                              },\n                              body: JSON.stringify(Share),\n                              mode : \"cors\"\n                            })\n                            .then(() => {\n                              alert(\"Share effacé !\");\n                              setTimeout(this.$router.push({ name: 'wall' }), 3000);\n                              this.$router.go(0);\n                            })\n                            .catch( (error) => { alert(error);\n                            })\n                          }else{\n                             this.$router.push({ name: 'wall' });\n                             this.$router.go(0);\n                          }\n            },\n          },\n\n          beforeMount () {\n                            const  Token = JSON.parse(sessionStorage.getItem(\"Token\"));\n                            const loggedUserId=JSON.parse(sessionStorage.getItem(\"UserId\"))\n                            const ShareId = new URL(window.location.href).hash.split(\"=\")[1];\n                           \n                           // LES COMMENTAIRES    \n\n                            fetch(`http://localhost:3000/api/comments/${ShareId}`, {\n                            method: 'GET',\n                            headers: {\"Content-Type\": \"application/json\", \n                                      \"Authorization\": \"Bearer \" + Token\n                            },\n                            mode : \"cors\"\n                            })\n                            .then((res) => {\n                              return res.json();\n                            })\n                            .then((res) =>{\n                              this.loggedUserId = loggedUserId;\n                              this.apiCommentsResponse=res\n                              this.apiLength = res.length\n                            })\n                            .catch( (error) => { alert(error);\n                            });\n          },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n\n\n</style>"]},"metadata":{},"sourceType":"module"}